services:
  # PostgreSQL database for source data
  postgres:
    image: debezium/postgres:14
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=codeshard
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c wal_level=logical -c max_wal_senders=4 -c max_replication_slots=4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cdc-network
  
  # Initialize PostgreSQL database
  postgres-init:
    image: debezium/postgres:14
    platform: linux/amd64
    depends_on:
      - postgres
    volumes:
      - ./postgres-init.sql:/postgres-init.sql
    command: >
      bash -c '
        echo "Initializing PostgreSQL database..."
        PGPASSWORD=postgres psql -h postgres -U postgres -d codeshard -f /postgres-init.sql
        echo "PostgreSQL initialization completed successfully."
      '
    restart: on-failure
    networks:
      - cdc-network

  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo ruok | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - cdc-network

  kafka:
    image: confluentinc/cp-kafka:latest
    platform: linux/amd64
    depends_on:
      - zookeeper
    links:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - cdc-network

  kafka-init:
    image: confluentinc/cp-kafka:latest
    platform: linux/amd64
    depends_on:
      - kafka
    command: >
      bash -c '
        echo "Waiting for Kafka to be ready..."
        sleep 15
        echo "Creating Kafka topics..."
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic postgres.public.likes --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic postgres.public.shards --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic postgres.public.followers --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic postgres.public.comments --partitions 3 --replication-factor 1
        echo "Kafka topics created successfully"
      '
    restart: on-failure
    networks:
      - cdc-network
  
  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    platform: linux/amd64
    ports:
      - 9000:9000
    networks: 
      - cdc-network
    depends_on:
      - kafka 
    restart: unless-stopped
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  cassandra:
    image: cassandra:4.0
    platform: linux/amd64
    ports:
      - "9042:9042"
    environment:
      - HEAP_NEWSIZE=128m
      - MAX_HEAP_SIZE=256m
      - CASSANDRA_CLUSTER_NAME=flink_cluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
      - CASSANDRA_ENDPOINT_SNITCH=SimpleSnitch
    volumes:
      - cassandra_data:/var/lib/cassandra
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'SHOW VERSION' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    ulimits:
      memlock: -1
      nofile: 100000
    privileged: true
    restart: unless-stopped
    networks:
      - cdc-network

  cassandra-init:
    image: cassandra:4.0
    platform: linux/amd64
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./cassandra-init.cql:/cassandra-init.cql
    command: >
      bash -c '
        echo "Waiting for Cassandra to be ready..."
        sleep 30
        while ! cqlsh cassandra; do
          echo "Cassandra is unavailable - sleeping"
          sleep 5
        done
        echo "Creating keyspace and tables..."
        cqlsh cassandra -f /cassandra-init.cql
        echo "Keyspace and tables created."
      '
    restart: on-failure
    networks:
      - cdc-network

  # Debezium Connect for PostgreSQL CDC 
  connect:
    image: debezium/connect:2.7.3.Final
    platform: linux/amd64
    ports:
      - "8083:8083"
    links:
      - kafka
      - postgres
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - GROUP_ID=1
      - BOOTSTRAP_SERVERS=kafka:29092
      - CONFIG_STORAGE_TOPIC=connect_configs
      - OFFSET_STORAGE_TOPIC=connect_offsets
    healthcheck:
      test: curl -f http://localhost:8083/ || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - cdc-network

  ## Redis 
  redis:
    image: redis:7
    platform: linux/amd64
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    deploy: 
      resources: 
        limits:
          memory: 1G
    networks:
      - cdc-network

  # FastAPI application
  fastapi:
    build:
      context: .
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - cassandra
      - connect
      - redis
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_AUTO_OFFSET_RESET=earliest
      - KAFKA_ENABLE_AUTO_COMMIT=true
      - KAFKA_GROUP_ID=2
      - CASSANDRA_CONTACT_POINTS=cassandra
      - CASSANDRA_PORT=9042
      - CASSANDRA_KEYSPACE=codeshard
      - CASSANDRA_TABLE=user_activity
      - CASSANDRA_USERNAME=cassandra
      - CASSANDRA_PASSWORD=cassandra
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=codeshard
      - DEBEZIUM_CONNECT_URL=http://connect:8083
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    restart: unless-stopped
    networks:
      - cdc-network
networks:
  cdc-network:
    driver: bridge
volumes:
  cassandra_data:
  postgres_data:
  redis_data: